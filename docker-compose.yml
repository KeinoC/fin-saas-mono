# Development Docker Compose for K-Fin
# Full development stack with hot reload and database

# version: '3.8'  # Removed as it's obsolete in newer Docker Compose

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: k-fin-app-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/k_fin_dev
      - DIRECT_URL=postgresql://postgres:postgres@database:5432/k_fin_dev
      - BETTER_AUTH_SECRET=dev-secret-key-change-in-production
      - BETTER_AUTH_URL=http://localhost:3000
      - RESEND_API_KEY=${RESEND_API_KEY:-}
      - EMAIL_FROM=${EMAIL_FROM:-K-Fin <dev@localhost>}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true
    volumes:
      # Mount source code for hot reload
      - ./apps:/app/apps
      - ./packages:/app/packages
      - ./scripts:/app/scripts
      - ./tests:/app/tests
      # Preserve node_modules for performance
      - k-fin-node-modules:/app/node_modules
      - k-fin-web-node-modules:/app/apps/web/node_modules
      # Next.js cache for faster builds
      - k-fin-next-cache:/app/apps/web/.next
    depends_on:
      database:
        condition: service_healthy
    networks:
      - k-fin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  database:
    image: postgres:15-alpine
    container_name: k-fin-database-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=k_fin_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - k-fin-postgres-data:/var/lib/postgresql/data
      - ../../../packages/database/prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - k-fin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d k_fin_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: k-fin-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - k-fin-redis-data:/data
    networks:
      - k-fin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Database management tool (optional)
  adminer:
    image: adminer:latest
    container_name: k-fin-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - database
    networks:
      - k-fin-network
    restart: unless-stopped
    profiles:
      - tools

  # Nginx reverse proxy for production-like testing (optional)
  nginx:
    image: nginx:alpine
    container_name: k-fin-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ../scripts/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - k-fin-network
    restart: unless-stopped
    profiles:
      - proxy

# Named volumes for data persistence
volumes:
  k-fin-postgres-data:
    driver: local
  k-fin-redis-data:
    driver: local
  k-fin-node-modules:
    driver: local
  k-fin-web-node-modules:
    driver: local
  k-fin-next-cache:
    driver: local

# Custom network
networks:
  k-fin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16